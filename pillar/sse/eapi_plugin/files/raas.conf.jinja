# Set ID to override default name for this master that will display in the UI
id: {{ grains.id }}

# Set the cluster ID that this Salt Master belongs to
sseapi_cluster_id: {{ eapi_cluster_id }}

# Set if multiple masters configurations are "active" or "failover"
sseapi_failover_master: {{ eapi_failover_master }}

# Enable SSE engines
engines:
  - sseapi: {}
  - eventqueue: {}
  - rpcqueue: {}
  - jobcompletion: {}
  - keyauth: {}

# Enable eAPI as a Master Job Cache and event returner
master_job_cache: sseapi
event_return: sseapi

# Specify eAPI connection settings
sseapi_server: {{ eapi_url }}
sseapi_ssl_validate_cert: {{ eapi_ssl_validation }}

# Key authentication settings
sseapi_pubkey_path: /etc/salt/pki/master/sseapi_key.pub  # Path to public key for authenticating to eAPI server
sseapi_key_check: 15                       # Keyauth engine interval, in seconds
sseapi_key_test: 300                       # How often to test master authentication key, in seconds
sseapi_key_rotation: 86400                 # Authentication key rotation interval, in seconds

# Username & password authentication settings
#sseapi_config_name: internal               # eAPI server credentials, not required if using key authentication
#sseapi_username:
#sseapi_password:

# SSL settings
#sseapi_ssl_key:                            # Path to the certificate's private key
#sseapi_ssl_cert:                           # Path to the certificate

# How frequently should the RaaS engine running on each master poll RaaS
# for commands targeting the given master and how often should the engine
# poll the master for data (minions, grains, file system) changes.
sseapi_poll_interval: 10

# Timeout for eAPI requests
sseapi_timeout: 180                        # Timeout for eAPI requests, in seconds

# Specify the eAPI fileserver update interval
sseapi_update_interval: 60

# Enable fileserver backends to use eAPI first, then local filesystem
fileserver_backend:
  - sseapi
  - roots

# Enable the eAPI external pillar
ext_pillar:
  - sseapi: {}

# Queue events locally and send to SSE in batches (for large or busy environments)
sseapi_event_queue:
  name: sseapi-events                      # Event queue name
  strategy: never                          # When to queue events: always, on_failure, never
  push_interval: 5                         # How often to push events to SSE, in seconds
  batch_limit: 2000                        # Maximum number of events to push to SSE per interval
  age_limit: 86400                         # Maximum queued event age, in seconds (drop older events)
  size_limit: 35000000                     # Maximum queue size, in events (drop oldest events)
  vacuum_interval: 86400                   # How often to vacuum queue DB, in seconds
  vacuum_limit: 350000                     # Maximum queue size when vacuuming queue DB, in entries
  forward: []                              # Additional salt returners to send events to when flushing the queue

# Queue some RPC calls locally and send to SSE in batches (for large or busy environments)
sseapi_rpc_queue:
  name: sseapi-rpc                         # RPC queue name
  strategy: never                          # When to queue RPC calls: always, on_failure, never
  push_interval: 5                         # How often to send calls to SSE, in seconds
  batch_limit: 500                         # Maximum number of calls to push to SSE per interval
  age_limit: 3600                          # Maximum queued call age, in seconds (drop older entries)
  size_limit: 360000                       # Maximum queue size, in entries (drop oldest entries)
  vacuum_interval: 86400                   # How often to vacuum queue DB, in seconds
  vacuum_limit: 100000                     # Maximum queue size when vacuuming queue DB, in entries

# Cache some SSE objects locally
sseapi_local_cache:
  load: 3600                               # Cache lifetime for save_load() payloads, in seconds
  tgt: 300                                 # Cache lifetime for SSE target groups, in seconds

sseapi_command_age_limit: 0                # Maximum age of a command, in seconds (drop older entries). Default is 0 which disables the feature.
